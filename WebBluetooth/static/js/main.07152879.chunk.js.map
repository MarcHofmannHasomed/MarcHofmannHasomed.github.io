{"version":3,"sources":["Logo.tsx","Chart.tsx","BleUuid.tsx","BleCharacteristicTable.tsx","BleDevice.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Logo","className","src","alt","width","height","React","Component","Chart","y_value_count","Array","from","this","props","Values","values","e","Math","max","length","min","CHART_VALUE_COUNT","labels","keys","map","toString","datasets","key","value","push","data","getChartValues","label","lineTension","fill","options","elements","line","capBezierPoints","tension","animation","duration","v","splice","BleUuid","uuid","init","res","mUuids","get","undefined","mInit","set","TIME_SERVER_SERVICE_UUID","FINA_SERVICE_UUID","FINA2_SERVICE_UUID","TIME_SERVER_CHARACTERISTIC_UUID","FINA_CHARACTERISTIC_UUID","FINA2_CHARACTERISTIC_UUID","Map","BleCharacteristicTable","n","Characteristics","forEach","c","state","Notifications","handleData","bind","header_node","idx","body_nodes","row_index","getName","properties","notify","href","onClick","preventDefault","a","IncomingDataCb","readValue","Service","console","error","b","addEventListener","ev","startNotifications","removeEventListener","stopNotifications","setState","Table","target","BleDevice","Device","Services","handleDisconnect","Container","Row","Col","Button","type","variant","disabled","discoverDevices","getButtonName","name","window","navigator","bluetooth","bt","getBluetooth","getAvailability","avail","warn","filters","optionalServices","requestDevice","device","log","gatt","connect","service_map","server","getPrimaryServices","services","getCharacteristics","characteristics","connected","disconnect","service","characteristic","i","byteLength","getUint8","slice","join","getInt16","App","handleIncomingData","s","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.07152879.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\n\r\nexport class Logo extends React.Component {\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <div>\r\n            <div className=\"topright\">\r\n                <img src={\"SmartSystems-Icon.jpg\"} alt={\"smart_systems_logo\"} width=\"150\" height=\"150\" />\r\n            </div>\r\n            <div className=\"bottomright\">\r\n                <img src={\"haso_schnitt.jpg\"} alt={\"haso_logo\"} width=\"157\" height=\"168\" />\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Line } from 'react-chartjs-2'\r\nimport * as chartjs from 'chart.js'\r\n\r\n\r\nexport interface IChartProps {\r\n    Values: Map<string, number[]>;\r\n}\r\n\r\nexport interface IChartState {\r\n}\r\n\r\nexport class Chart extends React.Component<IChartProps, IChartState> {\r\n\r\n    static CHART_VALUE_COUNT: number = 120;\r\n\r\n    public render() {\r\n\r\n        let y_value_count: number = 0;\r\n        for (const e of Array.from(this.props.Values.values()))\r\n            y_value_count = Math.max(y_value_count, e.length);\r\n        y_value_count = Math.min(y_value_count, Chart.CHART_VALUE_COUNT);\r\n        const labels: string[] = Array.from(Array(y_value_count).keys()).map((e: number) => e.toString());\r\n\r\n        const datasets: chartjs.ChartDataSets[] = [];\r\n        Array.from(this.props.Values, ([key, value]) => {\r\n            datasets.push({\r\n                data: this.getChartValues(value), label: key, lineTension: 0.0,\r\n                fill: false\r\n            });\r\n        });\r\n\r\n        const data: chartjs.ChartData = {\r\n            labels: labels,\r\n            datasets: datasets\r\n        };\r\n        const options: chartjs.ChartOptions = { elements: { line: { capBezierPoints: false, tension: 0 } }, animation: { duration: 0 } };\r\n\r\n        return (\r\n            <Line data={data} options={options} />\r\n        );\r\n    }\r\n\r\n    protected getChartValues(values: number[]): number[] {\r\n        const v: number[] = [...values];\r\n        if (v.length > Chart.CHART_VALUE_COUNT)\r\n            v.splice(0, v.length - Chart.CHART_VALUE_COUNT);\r\n        return v;\r\n    }\r\n}","\r\n\r\nexport class BleUuid {\r\n\r\n    public static getName(uuid: string) {\r\n        this.init();\r\n        let res: string | undefined = this.mUuids.get(uuid);\r\n        if (res === undefined) {\r\n            res = uuid;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public static TIME_SERVER_SERVICE_UUID: string = '00001805-0000-1000-8000-00805f9b34fb';\r\n    public static TIME_SERVER_CHARACTERISTIC_UUID: string = '00002a2b-0000-1000-8000-00805f9b34fb';\r\n\r\n    public static FINA_SERVICE_UUID: string = '00000000-0001-11e1-9ab4-0002a5d5c51b';\r\n    // public static FINA_CHARACTERISTIC_UUID: string = '0000aacc-8e22-4541-9d4c-21edae82ed19';\r\n    public static FINA_CHARACTERISTIC_UUID: string = '10000000-0001-11e1-ac36-0002a5d5c51b';\r\n\r\n    public static FINA2_SERVICE_UUID: string = '0000fe40-cc7a-482a-984a-7f2ed5b3e58f';\r\n    public static FINA2_CHARACTERISTIC_UUID: string = '0000aacc-8e22-4541-9d4c-21edae82ed19';\r\n\r\n\r\n    private static init() {\r\n        if (!this.mInit) {\r\n            this.mInit = true;\r\n\r\n            this.mUuids.set(this.TIME_SERVER_SERVICE_UUID, 'Time service');\r\n            this.mUuids.set(this.FINA_SERVICE_UUID, 'Breathing service');\r\n            this.mUuids.set(this.FINA2_SERVICE_UUID, 'STM32 BLE service');\r\n\r\n            this.mUuids.set(this.TIME_SERVER_CHARACTERISTIC_UUID, 'Get time');\r\n            this.mUuids.set(this.FINA_CHARACTERISTIC_UUID, 'Get values');\r\n            this.mUuids.set(this.FINA2_CHARACTERISTIC_UUID, 'Get values');\r\n        }\r\n    }\r\n\r\n\r\n    private static mInit: boolean = false;\r\n    private static mUuids: Map<string, string> = new Map<string, string>();\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { BleUuid } from './BleUuid';\r\n\r\nexport interface IBleCharacteristicTableProps {\r\n    Service: BluetoothRemoteGATTService;\r\n    Characteristics: BluetoothRemoteGATTCharacteristic[];\r\n\r\n    IncomingDataCb?: (service: BluetoothRemoteGATTService, characteristic: BluetoothRemoteGATTCharacteristic, data: DataView) => void;\r\n}\r\n\r\nexport interface IBleCharacteristicTableState {\r\n    Notifications: Map<string, boolean>;\r\n}\r\n\r\nexport class BleCharacteristicTable extends React.Component<IBleCharacteristicTableProps, IBleCharacteristicTableState> {\r\n\r\n    constructor(props: IBleCharacteristicTableProps) {\r\n        super(props);\r\n\r\n        const n: Map<string, boolean> = new Map();\r\n        this.props.Characteristics.forEach((c: BluetoothRemoteGATTCharacteristic) => n.set(c.uuid, false));\r\n        this.state = { Notifications: n };\r\n\r\n        this.handleData = this.handleData.bind(this);\r\n    }\r\n\r\n    public render() {\r\n\r\n        const header: string[] = ['#', 'UUID', 'Notification', 'Action', ''];\r\n        const header_node = (<thead>\r\n            <tr>\r\n                {header.map((e: string, idx: number) => <th key={idx}>{e}</th>)}\r\n            </tr>\r\n        </thead>);\r\n\r\n        const body_nodes = (\r\n            this.props.Characteristics.map((c: BluetoothRemoteGATTCharacteristic, row_index: number) => {\r\n                return (\r\n                    <tbody key={row_index}>\r\n                        <tr className='clickable-row'>\r\n                            {/* <th scope=\"row\"><b>{row_index + 1}</b></th> */}\r\n\r\n                            <td>{row_index}</td>\r\n                            <td>{BleUuid.getName(c.uuid)}</td>\r\n                            <td>{c.properties.notify.toString()}</td>\r\n                            <td>\r\n                                <a href='#' onClick={(e: any) => {\r\n                                    e.preventDefault();\r\n                                    (async () => {\r\n                                        try {\r\n                                            if (this.props.IncomingDataCb) {\r\n                                                const value = await c.readValue();\r\n                                                this.props.IncomingDataCb(this.props.Service, c, value);\r\n                                            }\r\n                                        }\r\n                                        catch (e) {\r\n                                            console.error(e);\r\n                                        }\r\n                                    })();\r\n\r\n                                }}>\r\n                                    Read\r\n                                </a>\r\n                            </td>\r\n                            <td>\r\n                                <a href='#' onClick={(e: any) => {\r\n                                    e.preventDefault();\r\n                                    (async () => {\r\n                                        try {\r\n                                            if (!c.properties.notify)\r\n                                                return;\r\n                                            const n = this.state.Notifications;\r\n                                            let b: boolean = n.get(c.uuid) ? false : true; // invert here\r\n                                            if (b) {\r\n                                                c.addEventListener('characteristicvaluechanged', (ev: any) => { this.handleData(ev, c) });\r\n                                                await c.startNotifications();\r\n                                            }\r\n                                            else {\r\n                                                c.removeEventListener('characteristicvaluechanged', (ev: any) => { this.handleData(ev, c) });\r\n                                                await c.stopNotifications();\r\n                                            }\r\n                                            n.set(c.uuid, b);\r\n                                            this.setState({ Notifications: n });\r\n                                        }\r\n                                        catch (e) {\r\n                                            console.error(e);\r\n                                        }\r\n                                    })();\r\n\r\n                                }}>\r\n                                    {c.properties.notify ?  this.state.Notifications.get(c.uuid) ? 'Stop notification' : 'Start notification': ''}\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                );\r\n            })\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                Service: {BleUuid.getName(this.props.Service.uuid)}\r\n                <Table className=\"table-hover\">\r\n                    {header_node}\r\n                    {body_nodes}\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    protected handleData(ev: any, c: BluetoothRemoteGATTCharacteristic) {\r\n        if (!ev || !ev.target)\r\n            return;\r\n        const value = ev.target.value;\r\n\r\n        if (this.props.IncomingDataCb) {\r\n            this.props.IncomingDataCb(this.props.Service, c, value);\r\n        }\r\n    }\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Container, Row, Button, Form, Col } from 'react-bootstrap'\r\nimport { BleCharacteristicTable } from './BleCharacteristicTable';\r\nimport { BleUuid } from './BleUuid';\r\n\r\n\r\nexport interface IBleDeviceProps {\r\n    IncomingDataCb?: (uuid: string, value: number) => void;\r\n}\r\n\r\nexport interface IBleDeviceState {\r\n    Device?: BluetoothDevice;\r\n    Services: Map<BluetoothRemoteGATTService, BluetoothRemoteGATTCharacteristic[]>;\r\n}\r\n\r\nexport class BleDevice extends React.Component<IBleDeviceProps, IBleDeviceState> {\r\n\r\n    constructor(props: IBleDeviceProps) {\r\n        super(props);\r\n        this.state = { Device: undefined, Services: new Map() };\r\n\r\n        this.handleData = this.handleData.bind(this);\r\n        this.handleDisconnect = this.handleDisconnect.bind(this);\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <Container>\r\n                <Row />\r\n                <Row>\r\n                    <Col>\r\n                        <Button type=\"button\" variant=\"primary\" disabled={this.state.Device !== undefined}\r\n                            onClick={() => this.discoverDevices()}>{this.getButtonName()}</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        Device: {this.state.Device ? this.state.Device.name : ''}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    </Col>\r\n                </Row>\r\n                {Array.from(this.state.Services, ([key, value]) => {\r\n                    return (\r\n                        <Row key={key.uuid}>\r\n                            <Col>\r\n                                <BleCharacteristicTable Service={key} Characteristics={value} IncomingDataCb={this.handleData} />\r\n                            </Col>\r\n                        </Row>\r\n                    );\r\n                })}\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    protected getButtonName(): string {\r\n        if (this.state.Device)\r\n            return \"Disconnect\";\r\n        else\r\n            return \"Connect\";\r\n    }\r\n\r\n    protected getBluetooth(): Bluetooth {\r\n        return (window.navigator as any).bluetooth;\r\n    }\r\n\r\n    protected discoverDevices() {\r\n        (async () => {\r\n            try {\r\n                const bt: Bluetooth = this.getBluetooth();\r\n                const avail: boolean = await bt.getAvailability();\r\n                console.warn(\"BT LE available \" + avail);\r\n                if (avail) {\r\n\r\n                    // const options: RequestDeviceOptions = { acceptAllDevices: true};\r\n                    // const options: RequestDeviceOptions = { acceptAllDevices: true, optionalServices: [App.TIME_SERVER_SERVICE_UUID, App.FINA_SERVICE_UUID] };\r\n                    // const options: RequestDeviceOptions = { filters: [{ name: 'FINA' }], optionalServices: [BleUuid.TIME_SERVER_SERVICE_UUID, BleUuid.FINA_SERVICE_UUID, BleUuid.FINA2_SERVICE_UUID] };\r\n                    // const options: RequestDeviceOptions = { filters: [{ services: [0x1805] }] };\r\n\r\n                    // this line works!\r\n                    const options: RequestDeviceOptions = { filters: [{ name: 'P2PSRV1' }], optionalServices: [BleUuid.FINA_SERVICE_UUID, BleUuid.FINA2_SERVICE_UUID] };\r\n                    const device: BluetoothDevice = await bt.requestDevice(options);\r\n                    console.log(device);\r\n                    if (!device || !device.gatt) { return; }\r\n                    this.setState({ Device: device }, () => { this.connect(); });\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.error(\"error in discoverDevices\");\r\n                console.error(e);\r\n                this.setState({ Device: undefined, Services: new Map() });\r\n            }\r\n        })();\r\n    }\r\n\r\n    protected connect() {\r\n        (async () => {\r\n            try {\r\n                const device: BluetoothDevice | undefined = this.state.Device;\r\n                if (!device || !device.gatt)\r\n                    return;\r\n\r\n                const service_map: Map<BluetoothRemoteGATTService, BluetoothRemoteGATTCharacteristic[]> = new Map();\r\n                device.addEventListener('gattserverdisconnected', this.handleDisconnect);\r\n                const server: BluetoothRemoteGATTServer = await device.gatt.connect();\r\n                console.log(server);\r\n\r\n                const services: BluetoothRemoteGATTService[] = await server.getPrimaryServices();\r\n                console.log(services);\r\n\r\n                for (const e of services) {\r\n                    const characteristics: BluetoothRemoteGATTCharacteristic[] = await e.getCharacteristics();\r\n                    console.log(characteristics);\r\n\r\n                    service_map.set(e, characteristics);\r\n                }\r\n\r\n                this.setState({ Services: service_map });\r\n            }\r\n            catch (e) {\r\n                console.error(\"error in connect\");\r\n                console.error(e);\r\n                this.setState({ Device: undefined, Services: new Map() });\r\n            }\r\n        })();\r\n    }\r\n\r\n    protected disconnect() {\r\n        (async () => {\r\n            try {\r\n                const device: BluetoothDevice | undefined = this.state.Device;\r\n                if (!device || !device.gatt)\r\n                    return;\r\n                if (device.gatt.connected) {\r\n                    //this.stopNotification();\r\n                    device.gatt.disconnect();\r\n                    this.setState({ Device: undefined, Services: new Map() });\r\n                }\r\n\r\n            }\r\n            catch (e) {\r\n                console.error(\"error in disconnect\");\r\n                console.error(e);\r\n                this.setState({ Device: undefined, Services: new Map() });\r\n            }\r\n        })();\r\n    }\r\n\r\n    protected handleDisconnect(ev: any) {\r\n        console.log('disconnect');\r\n        this.disconnect();\r\n    }\r\n\r\n    protected handleData(service: BluetoothRemoteGATTService, characteristic: BluetoothRemoteGATTCharacteristic, data: DataView) {\r\n        console.log(data);\r\n\r\n        const a: string[] = [];\r\n        for (var i = 0; i < data.byteLength; i++)\r\n            a.push('0x' + ('00' + data.getUint8(i).toString(16).slice(-2)));\r\n        const b: string = a.join(' ');\r\n        console.log(b);\r\n\r\n        if (this.props.IncomingDataCb) {\r\n            let value: number = 0;\r\n            if (characteristic.uuid === BleUuid.TIME_SERVER_CHARACTERISTIC_UUID) {\r\n                value = data.getUint8(6);\r\n            }\r\n            else if (characteristic.uuid === BleUuid.FINA_CHARACTERISTIC_UUID) {\r\n                value = data.getInt16(2, true);\r\n                // s.push(data.getUint8(2));\r\n            }\r\n            this.props.IncomingDataCb(characteristic.uuid, value);\r\n        }\r\n    }\r\n\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Container, Row, Button, Form, Col } from 'react-bootstrap'\r\n\r\nimport './App.css';\r\nimport { BleCharacteristicTable } from './BleCharacteristicTable';\r\nimport { Logo } from './Logo';\r\nimport { BleUuid } from './BleUuid';\r\nimport { Chart } from './Chart';\r\nimport { BleDevice } from './BleDevice';\r\n\r\nexport interface IAppProps {\r\n}\r\n\r\nexport interface IAppState {\r\n  Values: Map<string, number[]>;\r\n}\r\n\r\nexport class App extends React.Component<IAppProps, IAppState> {\r\n\r\n\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n    this.state = { Values: new Map() };\r\n\r\n    this.handleIncomingData = this.handleIncomingData.bind(this);\r\n  }\r\n\r\n\r\n  public render() {\r\n\r\n    return (<div className=\"mt-5\">\r\n      <Logo />\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <div className=\"mt-5\">\r\n              <BleDevice IncomingDataCb={this.handleIncomingData} />\r\n            </div>\r\n            <div className=\"mt-5\">\r\n              <Chart Values={this.state.Values} />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div >\r\n    );\r\n  }\r\n\r\n  protected handleIncomingData(uuid: string, value: number) {\r\n    const s: number[] = this.state.Values.get(uuid) ? this.state.Values.get(uuid) as number[] : [];\r\n    s.push(value);\r\n\r\n    const v = this.state.Values;\r\n    v.set(uuid, s);\r\n    this.setState({ Values: v });\r\n  };\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Logo.tsx","BleUuid.tsx","Chart.tsx","BleCharacteristicTable.tsx","BleDevice.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Logo","className","Image","src","width","height","React","Component","BleUuid","uuid","this","init","res","mUuids","get","undefined","mInit","set","TIME_SERVER_SERVICE_UUID","FINA_SERVICE_UUID","FINA2_SERVICE_UUID","TIME_SERVER_CHARACTERISTIC_UUID","FINA_CHARACTERISTIC_UUID","FINA2_CHARACTERISTIC_UUID","Map","Chart","y_value_count","Array","from","props","Values","values","e","Math","max","length","min","CHART_VALUE_COUNT","labels","keys","map","toString","datasets","key","value","push","data","getChartValues","label","getName","lineTension","fill","options","elements","line","capBezierPoints","tension","animation","duration","v","splice","BleCharacteristicTable","n","state","Notifications","handleData","bind","header_node","idx","body_nodes","Services","c","row_index","href","onClick","preventDefault","a","properties","notify","b","addEventListener","ev","startNotifications","removeEventListener","stopNotifications","setState","console","error","Table","target","service","IncomingDataCb","BleDevice","Device","handleDisconnect","Container","Row","Col","Button","type","variant","handleButtonClick","getButtonName","name","disconnect","discoverDevices","window","navigator","bluetooth","bt","getBluetooth","getAvailability","avail","warn","filters","optionalServices","requestDevice","device","log","gatt","connect","service_map","server","getPrimaryServices","services","getCharacteristics","characteristics","connected","characteristic","i","byteLength","getUint8","slice","join","getInt16","App","handleIncomingData","s","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.78d2ff58.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Image } from 'react-bootstrap';\r\n\r\nexport class Logo extends React.Component {\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <div>\r\n                {/* <div className=\"topright wrapper\">\r\n                    <img className=\"img-responsive\" src={\"SmartSystems-Icon.jpg\"} alt={\"smart_systems_logo\"} width=\"75\" height=\"75\" />\r\n                </div>\r\n                <div className=\"bottomright wrapper\">\r\n                    <img className=\"img-responsive\" src={\"haso_schnitt.jpg\"} alt={\"haso_logo\"} width=\"78\" height=\"84\" />\r\n                </div> */}\r\n\r\n                {/* <div className=\"topright\">\r\n                    <Image src={\"SmartSystems-Icon.jpg\"} width=\"auto\" height=\"100%\" />\r\n                </div> */}\r\n                <div className=\"topright\">\r\n                    <Image src={\"haso_schnitt.jpg\"} width=\"auto\" height=\"100%\" />\r\n                    {/* <img className=\"img-responsive\" src={\"haso_schnitt.jpg\"} alt={\"haso_logo\"} width=\"78\" height=\"84\" /> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","\r\n\r\nexport class BleUuid {\r\n\r\n    public static getName(uuid: string) {\r\n        this.init();\r\n        let res: string | undefined = this.mUuids.get(uuid);\r\n        if (res === undefined) {\r\n            res = uuid;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public static TIME_SERVER_SERVICE_UUID: string = '00001805-0000-1000-8000-00805f9b34fb';\r\n    public static TIME_SERVER_CHARACTERISTIC_UUID: string = '00002a2b-0000-1000-8000-00805f9b34fb';\r\n\r\n    public static FINA_SERVICE_UUID: string = '00000000-0001-11e1-9ab4-0002a5d5c51b';\r\n    // public static FINA_CHARACTERISTIC_UUID: string = '0000aacc-8e22-4541-9d4c-21edae82ed19';\r\n    public static FINA_CHARACTERISTIC_UUID: string = '10000000-0001-11e1-ac36-0002a5d5c51b';\r\n\r\n    public static FINA2_SERVICE_UUID: string = '0000fe40-cc7a-482a-984a-7f2ed5b3e58f';\r\n    public static FINA2_CHARACTERISTIC_UUID: string = '0000aacc-8e22-4541-9d4c-21edae82ed19';\r\n\r\n\r\n    private static init() {\r\n        if (!this.mInit) {\r\n            this.mInit = true;\r\n\r\n            this.mUuids.set(this.TIME_SERVER_SERVICE_UUID, 'Time service');\r\n            this.mUuids.set(this.FINA_SERVICE_UUID, 'Breathing service');\r\n            this.mUuids.set(this.FINA2_SERVICE_UUID, 'STM32 BLE service');\r\n\r\n            this.mUuids.set(this.TIME_SERVER_CHARACTERISTIC_UUID, 'Get time');\r\n            this.mUuids.set(this.FINA_CHARACTERISTIC_UUID, 'Get values');\r\n            this.mUuids.set(this.FINA2_CHARACTERISTIC_UUID, 'Get values');\r\n        }\r\n    }\r\n\r\n\r\n    private static mInit: boolean = false;\r\n    private static mUuids: Map<string, string> = new Map<string, string>();\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Line } from 'react-chartjs-2'\r\nimport * as chartjs from 'chart.js'\r\nimport { BleUuid } from './BleUuid';\r\n\r\n\r\nexport interface IChartProps {\r\n    Values: Map<string, number[]>;\r\n}\r\n\r\nexport interface IChartState {\r\n}\r\n\r\nexport class Chart extends React.Component<IChartProps, IChartState> {\r\n\r\n    static CHART_VALUE_COUNT: number = 120;\r\n\r\n    public render() {\r\n\r\n        let y_value_count: number = 0;\r\n        for (const e of Array.from(this.props.Values.values()))\r\n            y_value_count = Math.max(y_value_count, e.length);\r\n        y_value_count = Math.min(y_value_count, Chart.CHART_VALUE_COUNT);\r\n        const labels: string[] = Array.from(Array(y_value_count).keys()).map((e: number) => e.toString());\r\n\r\n        const datasets: chartjs.ChartDataSets[] = [];\r\n        Array.from(this.props.Values, ([key, value]) => {\r\n            datasets.push({\r\n                data: this.getChartValues(value), label: BleUuid.getName(key), lineTension: 0.0,\r\n                fill: false\r\n            });\r\n        });\r\n\r\n        const data: chartjs.ChartData = {\r\n            labels: labels,\r\n            datasets: datasets\r\n        };\r\n        const options: chartjs.ChartOptions = { elements: { line: { capBezierPoints: false, tension: 0 } }, animation: { duration: 0 } };\r\n\r\n        return (\r\n            <Line data={data} options={options} />\r\n        );\r\n    }\r\n\r\n    protected getChartValues(values: number[]): number[] {\r\n        const v: number[] = [...values];\r\n        if (v.length > Chart.CHART_VALUE_COUNT)\r\n            v.splice(0, v.length - Chart.CHART_VALUE_COUNT);\r\n        return v;\r\n    }\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { BleUuid } from './BleUuid';\r\n\r\nexport interface IBleCharacteristicTableProps {\r\n    Services: Map<BluetoothRemoteGATTService, BluetoothRemoteGATTCharacteristic[]>;\r\n    // Characteristics: BluetoothRemoteGATTCharacteristic[];\r\n\r\n    IncomingDataCb?: (service: BluetoothRemoteGATTService, characteristic: BluetoothRemoteGATTCharacteristic, data: DataView) => void;\r\n}\r\n\r\nexport interface IBleCharacteristicTableState {\r\n    Notifications: Map<string, boolean>;\r\n}\r\n\r\nexport class BleCharacteristicTable extends React.Component<IBleCharacteristicTableProps, IBleCharacteristicTableState> {\r\n\r\n    constructor(props: IBleCharacteristicTableProps) {\r\n        super(props);\r\n\r\n        const n: Map<string, boolean> = new Map();\r\n        // this.props.Characteristics.forEach((c: BluetoothRemoteGATTCharacteristic) => n.set(c.uuid, false));\r\n        this.state = { Notifications: n };\r\n\r\n        this.handleData = this.handleData.bind(this);\r\n    }\r\n\r\n    public render() {\r\n\r\n        const header: string[] = ['#', 'Service', 'Characteristic', 'Action'];\r\n        const header_node = (<thead>\r\n            <tr>\r\n                {header.map((e: string, idx: number) => <th key={idx}>{e}</th>)}\r\n            </tr>\r\n        </thead>);\r\n\r\n        const body_nodes = (\r\n            Array.from(this.props.Services, ([key, value]) => {\r\n\r\n                return value.map((c: BluetoothRemoteGATTCharacteristic, row_index: number) => {\r\n                    return (\r\n                        <tbody key={row_index}>\r\n                            <tr className='clickable-row'>\r\n                                {/* <th scope=\"row\"><b>{row_index + 1}</b></th> */}\r\n\r\n                                <td>{row_index}</td>\r\n                                <td>{BleUuid.getName(key.uuid)}</td>\r\n                                <td>{BleUuid.getName(c.uuid)}</td>\r\n                                <td>\r\n                                    <a href='#' onClick={(e: any) => {\r\n                                        e.preventDefault();\r\n                                        (async () => {\r\n                                            try {\r\n                                                if (!c.properties.notify)\r\n                                                    return;\r\n                                                const n = this.state.Notifications;\r\n                                                let b: boolean = n.get(c.uuid) ? false : true; // invert here\r\n                                                if (b) {\r\n                                                    c.addEventListener('characteristicvaluechanged', (ev: any) => { this.handleData(ev, c) });\r\n                                                    await c.startNotifications();\r\n                                                }\r\n                                                else {\r\n                                                    c.removeEventListener('characteristicvaluechanged', (ev: any) => { this.handleData(ev, c) });\r\n                                                    await c.stopNotifications();\r\n                                                }\r\n                                                n.set(c.uuid, b);\r\n                                                this.setState({ Notifications: n });\r\n                                            }\r\n                                            catch (e) {\r\n                                                console.error(e);\r\n                                            }\r\n                                        })();\r\n\r\n                                    }}>\r\n                                        {c.properties.notify ? this.state.Notifications.get(c.uuid) ? 'Stop notification' : 'Start notification' : ''}\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    );\r\n                })\r\n            }));\r\n\r\n        return (\r\n            <div>\r\n                {/* Service: {BleUuid.getName(this.props.Service.uuid)} */}\r\n                <Table className=\"table-hover\">\r\n                    {header_node}\r\n                    {body_nodes}\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    protected handleData(ev: any, c: BluetoothRemoteGATTCharacteristic) {\r\n        if (!ev || !ev.target || !c || !c.service)\r\n            return;\r\n        const value = ev.target.value;\r\n\r\n        if (this.props.IncomingDataCb) {\r\n            this.props.IncomingDataCb(c.service, c, value);\r\n        }\r\n    }\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Container, Row, Button, Form, Col } from 'react-bootstrap'\r\nimport { BleCharacteristicTable } from './BleCharacteristicTable';\r\nimport { BleUuid } from './BleUuid';\r\n\r\n\r\nexport interface IBleDeviceProps {\r\n    IncomingDataCb?: (uuid: string, value: number) => void;\r\n}\r\n\r\nexport interface IBleDeviceState {\r\n    Device?: BluetoothDevice;\r\n    Services: Map<BluetoothRemoteGATTService, BluetoothRemoteGATTCharacteristic[]>;\r\n}\r\n\r\nexport class BleDevice extends React.Component<IBleDeviceProps, IBleDeviceState> {\r\n\r\n    constructor(props: IBleDeviceProps) {\r\n        super(props);\r\n        this.state = { Device: undefined, Services: new Map() };\r\n\r\n        this.handleData = this.handleData.bind(this);\r\n        this.handleDisconnect = this.handleDisconnect.bind(this);\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col className=\"col-4\">\r\n                        <Button type=\"button\" variant=\"primary\"\r\n                            onClick={() => this.handleButtonClick()}>{this.getButtonName()}</Button>\r\n                    </Col>\r\n                    <Col className=\"col-8\">\r\n                        Device: {this.state.Device ? this.state.Device.name : ''}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mt-5\">\r\n                    <Col>\r\n                        <BleCharacteristicTable Services={this.state.Services} IncomingDataCb={this.handleData} />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    protected getButtonName(): string {\r\n        if (this.state.Device)\r\n            return \"Disconnect\";\r\n        else\r\n            return \"Connect\";\r\n    }\r\n\r\n    protected handleButtonClick() {\r\n        if (this.state.Device)\r\n            this.disconnect();\r\n        else\r\n            this.discoverDevices();\r\n    }\r\n\r\n    protected getBluetooth(): Bluetooth {\r\n        return (window.navigator as any).bluetooth;\r\n    }\r\n\r\n    protected discoverDevices() {\r\n        (async () => {\r\n            try {\r\n                const bt: Bluetooth = this.getBluetooth();\r\n                const avail: boolean = await bt.getAvailability();\r\n                console.warn(\"BT LE available \" + avail);\r\n                if (avail) {\r\n\r\n                    // const options: RequestDeviceOptions = { acceptAllDevices: true};\r\n                    // const options: RequestDeviceOptions = { acceptAllDevices: true, optionalServices: [App.TIME_SERVER_SERVICE_UUID, App.FINA_SERVICE_UUID] };\r\n                    // const options: RequestDeviceOptions = { filters: [{ name: 'FINA' }], optionalServices: [BleUuid.TIME_SERVER_SERVICE_UUID, BleUuid.FINA_SERVICE_UUID, BleUuid.FINA2_SERVICE_UUID] };\r\n                    // const options: RequestDeviceOptions = { filters: [{ services: [0x1805] }] };\r\n\r\n                    // this line works!\r\n                    // const options: RequestDeviceOptions = { filters: [{ name: 'P2PSRV1' }], optionalServices: [BleUuid.FINA_SERVICE_UUID, BleUuid.FINA2_SERVICE_UUID] };\r\n                    const options: RequestDeviceOptions = { filters: [{ name: 'P2PSRV1' }], optionalServices: [BleUuid.FINA_SERVICE_UUID] };\r\n                    const device: BluetoothDevice = await bt.requestDevice(options);\r\n                    console.log(device);\r\n                    if (!device || !device.gatt) { return; }\r\n                    this.setState({ Device: device }, () => { this.connect(); });\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.error(\"error in discoverDevices\");\r\n                console.error(e);\r\n                this.setState({ Device: undefined, Services: new Map() });\r\n            }\r\n        })();\r\n    }\r\n\r\n    protected connect() {\r\n        (async () => {\r\n            try {\r\n                const device: BluetoothDevice | undefined = this.state.Device;\r\n                if (!device || !device.gatt)\r\n                    return;\r\n\r\n                const service_map: Map<BluetoothRemoteGATTService, BluetoothRemoteGATTCharacteristic[]> = new Map();\r\n                device.addEventListener('gattserverdisconnected', this.handleDisconnect);\r\n                const server: BluetoothRemoteGATTServer = await device.gatt.connect();\r\n                console.log(server);\r\n\r\n                const services: BluetoothRemoteGATTService[] = await server.getPrimaryServices();\r\n                console.log(services);\r\n\r\n                for (const e of services) {\r\n                    const characteristics: BluetoothRemoteGATTCharacteristic[] = await e.getCharacteristics();\r\n                    console.log(characteristics);\r\n\r\n                    service_map.set(e, characteristics);\r\n                }\r\n\r\n                this.setState({ Services: service_map });\r\n            }\r\n            catch (e) {\r\n                console.error(\"error in connect\");\r\n                console.error(e);\r\n                this.setState({ Device: undefined, Services: new Map() });\r\n            }\r\n        })();\r\n    }\r\n\r\n    protected disconnect() {\r\n        (async () => {\r\n            try {\r\n                const device: BluetoothDevice | undefined = this.state.Device;\r\n                if (!device || !device.gatt)\r\n                    return;\r\n                if (device.gatt.connected) {\r\n                    //this.stopNotification();\r\n                    this.setState({ Device: undefined, Services: new Map() }, () => {\r\n                        if (device.gatt)\r\n                            device.gatt.disconnect()\r\n                    });\r\n                }\r\n\r\n            }\r\n            catch (e) {\r\n                console.error(\"error in disconnect\");\r\n                console.error(e);\r\n                this.setState({ Device: undefined, Services: new Map() });\r\n            }\r\n        })();\r\n    }\r\n\r\n    protected handleDisconnect(ev: any) {\r\n        console.log('disconnect');\r\n        this.disconnect();\r\n    }\r\n\r\n    protected handleData(service: BluetoothRemoteGATTService, characteristic: BluetoothRemoteGATTCharacteristic, data: DataView) {\r\n        console.log(data);\r\n\r\n        const a: string[] = [];\r\n        for (var i = 0; i < data.byteLength; i++)\r\n            a.push('0x' + ('00' + data.getUint8(i).toString(16).slice(-2)));\r\n        const b: string = a.join(' ');\r\n        console.log(b);\r\n\r\n        if (this.props.IncomingDataCb) {\r\n            let value: number = 0;\r\n            if (characteristic.uuid === BleUuid.TIME_SERVER_CHARACTERISTIC_UUID) {\r\n                value = data.getUint8(6);\r\n            }\r\n            else if (characteristic.uuid === BleUuid.FINA_CHARACTERISTIC_UUID) {\r\n                value = data.getInt16(2, true);\r\n                // s.push(data.getUint8(2));\r\n            }\r\n            this.props.IncomingDataCb(characteristic.uuid, value);\r\n        }\r\n    }\r\n\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Container, Row, Button, Form, Col } from 'react-bootstrap'\r\n\r\nimport './App.css';\r\nimport { BleCharacteristicTable } from './BleCharacteristicTable';\r\nimport { Logo } from './Logo';\r\nimport { BleUuid } from './BleUuid';\r\nimport { Chart } from './Chart';\r\nimport { BleDevice } from './BleDevice';\r\n\r\nexport interface IAppProps {\r\n}\r\n\r\nexport interface IAppState {\r\n  Values: Map<string, number[]>;\r\n}\r\n\r\nexport class App extends React.Component<IAppProps, IAppState> {\r\n\r\n\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n    this.state = { Values: new Map() };\r\n\r\n    this.handleIncomingData = this.handleIncomingData.bind(this);\r\n  }\r\n\r\n\r\n  public render() {\r\n\r\n    return (<div className=\"mt-5\">\r\n      <Logo />\r\n      <Container>\r\n        <Row className=\"mt-5\">\r\n          <Col>\r\n            <BleDevice IncomingDataCb={this.handleIncomingData} />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Col>\r\n            <Chart Values={this.state.Values} />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Col />\r\n        </Row>\r\n      </Container>\r\n    </div >\r\n    );\r\n  }\r\n\r\n  protected handleIncomingData(uuid: string, value: number) {\r\n    const s: number[] = this.state.Values.get(uuid) ? this.state.Values.get(uuid) as number[] : [];\r\n    s.push(value);\r\n\r\n    const v = this.state.Values;\r\n    v.set(uuid, s);\r\n    this.setState({ Values: v });\r\n  };\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
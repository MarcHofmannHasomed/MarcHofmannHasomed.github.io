{"version":3,"sources":["BleCharacteristicTable.tsx","App.tsx","index.tsx"],"names":["BleCharacteristicTable","props","n","Map","Characteristics","forEach","c","set","uuid","state","Notifications","handleData","bind","header_node","map","e","idx","key","body_nodes","this","row_index","className","properties","notify","toString","href","onClick","preventDefault","a","IncomingDataCb","readValue","value","Service","console","error","b","get","addEventListener","ev","startNotifications","removeEventListener","stopNotifications","setState","Table","target","React","Component","App","Device","undefined","Services","Values","handleDisconnect","y_value_count","Array","from","values","Math","max","length","min","CHART_VALUE_COUNT","labels","keys","datasets","push","data","getChartValues","label","lineTension","fill","Container","Row","Col","Button","type","variant","disabled","discoverDevices","size","connect","disconnect","name","options","elements","line","capBezierPoints","tension","animation","duration","window","navigator","bluetooth","bt","getBluetooth","getAvailability","avail","warn","filters","optionalServices","FINA_SERVICE_UUID","FINA2_SERVICE_UUID","requestDevice","device","log","gatt","service_map","server","getPrimaryServices","services","getCharacteristics","characteristics","connected","service","characteristic","i","byteLength","getUint8","slice","join","s","TIME_SERVER_CHARACTERISTIC_UUID","FINA_CHARACTERISTIC_UUID","getInt16","v","splice","TIME_SERVER_SERVICE_UUID","FINA2_CHARACTERISTIC_UUID","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9802279.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nexport interface IBleCharacteristicTableProps {\r\n    Service: BluetoothRemoteGATTService;\r\n    Characteristics: BluetoothRemoteGATTCharacteristic[];\r\n\r\n    IncomingDataCb?: (service: BluetoothRemoteGATTService, characteristic: BluetoothRemoteGATTCharacteristic, data: DataView) => void;\r\n}\r\n\r\nexport interface IBleCharacteristicTableState {\r\n    Notifications: Map<string, boolean>;\r\n}\r\n\r\nexport class BleCharacteristicTable extends React.Component<IBleCharacteristicTableProps, IBleCharacteristicTableState> {\r\n\r\n    constructor(props: IBleCharacteristicTableProps) {\r\n        super(props);\r\n\r\n        const n: Map<string, boolean> = new Map();\r\n        this.props.Characteristics.forEach((c: BluetoothRemoteGATTCharacteristic) => n.set(c.uuid, false));\r\n        this.state = { Notifications: n };\r\n\r\n        this.handleData = this.handleData.bind(this);\r\n    }\r\n\r\n    public render() {\r\n\r\n        const header: string[] = ['#', 'UUID', 'Properties', '', ''];\r\n        const header_node = (<thead>\r\n            <tr>\r\n                {header.map((e: string, idx: number) => <th key={idx}>{e}</th>)}\r\n            </tr>\r\n        </thead>);\r\n\r\n        const body_nodes = (\r\n            this.props.Characteristics.map((c: BluetoothRemoteGATTCharacteristic, row_index: number) => {\r\n                return (\r\n                    <tbody key={row_index}>\r\n                        <tr className='clickable-row'>\r\n                            {/* <th scope=\"row\"><b>{row_index + 1}</b></th> */}\r\n\r\n                            <td>{row_index}</td>\r\n                            <td>{c.uuid}</td>\r\n                            <td>{c.properties.notify.toString()}</td>\r\n                            <td>\r\n                                <a href='#' onClick={(e: any) => {\r\n                                    e.preventDefault();\r\n                                    (async () => {\r\n                                        try {\r\n                                            if (this.props.IncomingDataCb) {\r\n                                                const value = await c.readValue();\r\n                                                this.props.IncomingDataCb(this.props.Service, c, value);\r\n                                            }\r\n                                        }\r\n                                        catch (e) {\r\n                                            console.error(e);\r\n                                        }\r\n                                    })();\r\n\r\n                                }}>\r\n                                    Read\r\n                                </a>\r\n                            </td>\r\n                            <td>\r\n                                <a href='#' onClick={(e: any) => {\r\n                                    e.preventDefault();\r\n                                    (async () => {\r\n                                        try {\r\n                                            if (!c.properties.notify)\r\n                                                return;\r\n                                            const n = this.state.Notifications;\r\n                                            let b: boolean = n.get(c.uuid) ? false : true; // invert here\r\n                                            if (b) {\r\n                                                c.addEventListener('characteristicvaluechanged', (ev: any) => { this.handleData(ev, c) });\r\n                                                await c.startNotifications();\r\n                                            }\r\n                                            else {\r\n                                                c.removeEventListener('characteristicvaluechanged', (ev: any) => { this.handleData(ev, c) });\r\n                                                await c.stopNotifications();\r\n                                            }\r\n                                            n.set(c.uuid, b);\r\n                                            this.setState({ Notifications: n });\r\n                                        }\r\n                                        catch (e) {\r\n                                            console.error(e);\r\n                                        }\r\n                                    })();\r\n\r\n                                }}>\r\n                                    {c.properties.notify ?  this.state.Notifications.get(c.uuid) ? 'Stop notification' : 'Start notification': ''}\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                );\r\n            })\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                Service: {this.props.Service.uuid}\r\n                <Table className=\"table-hover\">\r\n                    {header_node}\r\n                    {body_nodes}\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    protected handleData(ev: any, c: BluetoothRemoteGATTCharacteristic) {\r\n        if (!ev || !ev.target)\r\n            return;\r\n        const value = ev.target.value;\r\n\r\n        if (this.props.IncomingDataCb) {\r\n            this.props.IncomingDataCb(this.props.Service, c, value);\r\n        }\r\n    }\r\n}","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport { Container, Row, Button, Form, Col } from 'react-bootstrap'\nimport { Line } from 'react-chartjs-2'\nimport * as chartjs from 'chart.js'\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { BleCharacteristicTable } from './BleCharacteristicTable';\n\nexport interface IAppProps {\n}\n\nexport interface IAppState {\n  Device?: BluetoothDevice;\n  Services: Map<BluetoothRemoteGATTService, BluetoothRemoteGATTCharacteristic[]>;\n\n  Values: Map<string, number[]>;\n}\n\nexport class App extends React.Component<IAppProps, IAppState> {\n\n  static TIME_SERVER_SERVICE_UUID: string = '00001805-0000-1000-8000-00805f9b34fb';\n  static TIME_SERVER_CHARACTERISTIC_UUID: string = '00002a2b-0000-1000-8000-00805f9b34fb';\n\n  static FINA_SERVICE_UUID: string = '00000000-0001-11e1-9ab4-0002a5d5c51b';\n  // static FINA_CHARACTERISTIC_UUID: string = '0000aacc-8e22-4541-9d4c-21edae82ed19';\n  static FINA_CHARACTERISTIC_UUID: string = '10000000-0001-11e1-ac36-0002a5d5c51b';\n\n  static FINA2_SERVICE_UUID: string = '0000fe40-cc7a-482a-984a-7f2ed5b3e58f';\n  static FINA2_CHARACTERISTIC_UUID: string = '0000aacc-8e22-4541-9d4c-21edae82ed19';\n\n  static CHART_VALUE_COUNT: number = 120;\n\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = { Device: undefined, Services: new Map(), Values: new Map() };\n\n    this.handleData = this.handleData.bind(this);\n    this.handleDisconnect = this.handleDisconnect.bind(this);\n  }\n\n\n  public render() {\n\n    let y_value_count: number = 0;\n    for (const e of Array.from(this.state.Values.values()))\n      y_value_count = Math.max(y_value_count, e.length);\n    y_value_count = Math.min(y_value_count, App.CHART_VALUE_COUNT);\n    const labels: string[] = Array.from(Array(y_value_count).keys()).map((e: number) => e.toString());\n\n    const datasets: chartjs.ChartDataSets[] = [];\n    Array.from(this.state.Values, ([key, value]) => {\n      datasets.push({\n        data: this.getChartValues(value), label: key, lineTension: 0.0,\n        fill: false\n      });\n    });\n\n    const data: chartjs.ChartData = {\n      labels: labels,\n      datasets: datasets\n    };\n    const options: chartjs.ChartOptions = { elements: { line: { capBezierPoints: false, tension: 0 } }, animation: { duration: 0 } };\n\n    return (<div>\n      <Container>\n        <Row />\n        <Row>\n          <Col>\n            <Button type=\"button\" variant=\"primary\" disabled={this.state.Device !== undefined}\n              onClick={() => this.discoverDevices()}>Discover</Button>\n          </Col>\n          <Col>\n            <Button type=\"button\" variant=\"primary\" disabled={this.state.Device === undefined || this.state.Services.size > 0}\n              onClick={() => this.connect()}>Connect</Button>\n          </Col>\n          <Col>\n            <Button type=\"button\" variant=\"primary\" disabled={this.state.Device === undefined || this.state.Services.size === 0}\n              onClick={() => this.disconnect()}>Disconnect</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            Device: {this.state.Device ? this.state.Device.name : ''}\n          </Col>\n        </Row>\n        {Array.from(this.state.Services, ([key, value]) => {\n          return (\n            <Row key={key.uuid}>\n              <BleCharacteristicTable Service={key} Characteristics={value} IncomingDataCb={this.handleData} />\n            </Row>\n          );\n        })}\n        <Line data={data} options={options} />\n\n      </Container>\n    </div>\n    );\n  }\n\n  protected getBluetooth(): Bluetooth {\n    return (window.navigator as any).bluetooth;\n  }\n\n  protected discoverDevices() {\n    (async () => {\n      try {\n        const bt: Bluetooth = this.getBluetooth();\n        const avail: boolean = await bt.getAvailability();\n        console.warn(\"BT LE available \" + avail);\n        if (avail) {\n\n          // const options: RequestDeviceOptions = { acceptAllDevices: true};\n          // const options: RequestDeviceOptions = { acceptAllDevices: true, optionalServices: [App.TIME_SERVER_SERVICE_UUID, App.FINA_SERVICE_UUID] };\n          //  const options: RequestDeviceOptions = { filters: [{ name: 'FINA' }], optionalServices: [App.TIME_SERVER_SERVICE_UUID, App.FINA_SERVICE_UUID] };\n          const options: RequestDeviceOptions = { filters: [{ name: 'P2PSRV1' }], optionalServices: [App.FINA_SERVICE_UUID, App.FINA2_SERVICE_UUID] };\n          // const options: RequestDeviceOptions = { filters: [{ services: [0x1805] }] };\n          const device: BluetoothDevice = await bt.requestDevice(options);\n          console.log(device);\n          if (!device || !device.gatt) { return; }\n          this.setState({ Device: device });\n        }\n      }\n      catch (e) {\n        console.error(e);\n      }\n    })();\n  }\n\n  protected connect() {\n    (async () => {\n      try {\n        const device: BluetoothDevice | undefined = this.state.Device;\n        if (!device || !device.gatt)\n          return;\n\n        const service_map: Map<BluetoothRemoteGATTService, BluetoothRemoteGATTCharacteristic[]> = new Map();\n        device.addEventListener('gattserverdisconnected', this.handleDisconnect);\n        const server: BluetoothRemoteGATTServer = await device.gatt.connect();\n        console.log(server);\n\n        const services: BluetoothRemoteGATTService[] = await server.getPrimaryServices();\n        console.log(services);\n\n        for (const e of services) {\n          const characteristics: BluetoothRemoteGATTCharacteristic[] = await e.getCharacteristics();\n          console.log(characteristics);\n\n          service_map.set(e, characteristics);\n        }\n\n        this.setState({ Services: service_map, Values: new Map() });\n      }\n      catch (e) {\n        console.error(e);\n      }\n    })();\n  }\n  protected disconnect() {\n    (async () => {\n      try {\n        const device: BluetoothDevice | undefined = this.state.Device;\n        if (!device || !device.gatt)\n          return;\n        if (device.gatt.connected) {\n          //this.stopNotification();\n          device.gatt.disconnect();\n          this.setState({ Device: undefined, Services: new Map() });\n        }\n\n      }\n      catch (e) {\n        console.error(e);\n      }\n    })();\n  }\n\n  protected handleDisconnect(ev: any) {\n    console.log('disconnect');\n    this.disconnect();\n  }\n\n  protected handleData(service: BluetoothRemoteGATTService, characteristic: BluetoothRemoteGATTCharacteristic, data: DataView) {\n    console.log(data);\n\n    const a: string[] = [];\n    for (var i = 0; i < data.byteLength; i++)\n      a.push('0x' + ('00' + data.getUint8(i).toString(16).slice(-2)));\n    const b: string = a.join(' ');\n    console.log(b);\n\n    const s: number[] = this.state.Values.get(characteristic.uuid) ? this.state.Values.get(characteristic.uuid) as number[] : [];\n    if (characteristic.uuid === App.TIME_SERVER_CHARACTERISTIC_UUID)\n      s.push(data.getUint8(6));\n    else if (characteristic.uuid === App.FINA_CHARACTERISTIC_UUID) {\n      s.push(data.getInt16(2, true));\n      // s.push(data.getUint8(2));\n    }\n\n    const v = this.state.Values;\n    v.set(characteristic.uuid, s);\n    this.setState({ Values: v });\n  }\n\n  protected getChartValues(values: number[]): number[] {\n    const v: number[] = [...values];\n    if (v.length > App.CHART_VALUE_COUNT)\n      v.splice(0, v.length - App.CHART_VALUE_COUNT);\n    return v;\n  }\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}